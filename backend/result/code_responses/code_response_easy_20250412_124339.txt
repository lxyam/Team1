
{
  "title": "用户行为日志分析与预测",
  "difficulty": "easy",
  "description": "你正在开发一个电商平台的后台系统，需要处理用户行为日志数据，并预测用户是否会购买商品。系统需要完成以下任务：1) 从Kafka消费用户行为日志；2) 将日志存储到MongoDB；3) 使用机器学习模型预测购买概率；4) 通过REST API暴露预测结果。",
  "requirements": [
    "使用Python实现数据处理逻辑",
    "使用FastAPI创建REST API端点",
    "将用户行为日志存储到MongoDB",
    "使用PyTorch实现简单的购买预测模型",
    "从Kafka消费JSON格式的用户行为数据"
  ],
  "example_input": {
    "user_id": "user123",
    "item_id": "item456",
    "action": "view",
    "duration": 30,
    "timestamp": "2023-01-01T12:00:00Z"
  },
  "example_output": {
    "user_id": "user123",
    "item_id": "item456",
    "prediction": 0.75,
    "message": "High probability of purchase"
  },
  "solution": {
    "python": {
      "code": "from fastapi import FastAPI\nfrom pymongo import MongoClient\nfrom kafka import KafkaConsumer\nimport torch\nimport torch.nn as nn\nimport json\n\n# 初始化FastAPI\napp = FastAPI()\n\n# 连接MongoDB\nclient = MongoClient('mongodb://localhost:27017/')\ndb = client['ecommerce']\ncollection = db['user_actions']\n\n# 简单的PyTorch模型\nclass PurchasePredictor(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.layer = nn.Linear(2, 1)  # 输入: duration和action_type\n        self.sigmoid = nn.Sigmoid()\n    \n    def forward(self, x):\n        return self.sigmoid(self.layer(x))\n\nmodel = PurchasePredictor()\nmodel.load_state_dict(torch.load('model.pth'))\nmodel.eval()\n\n# Kafka消费者\nconsumer = KafkaConsumer(\n    'user_actions',\n    bootstrap_servers=['localhost:9092'],\n    value_deserializer=lambda m: json.loads(m.decode('utf-8'))\n\n# 处理Kafka消息的函数\ndef process_messages():\n    for message in consumer:\n        data = message.value\n        # 存储到MongoDB\n        collection.insert_one(data)\n        print(f\"Stored data for user {data['user_id']}\")\n\n# FastAPI端点\n@app.get(\"/predict/{user_id}/{item_id}\")\nasync def predict_purchase(user_id: str, item_id: str):\n    # 从MongoDB查询用户行为\n    user_actions = collection.find({\"user_id\": user_id, \"item_id\": item_id})\n    \n    # 计算总浏览时长和浏览次数\n    total_duration = 0\n    view_count = 0\n    for action in user_actions:\n        if action['action'] == 'view':\n            total_duration += action['duration']\n            view_count += 1\n    \n    # 使用模型预测\n    if view_count > 0:\n        input_tensor = torch.tensor([[total_duration/view_count, view_count]], dtype=torch.float32)\n        with torch.no_grad():\n            prediction = model(input_tensor).item()\n        \n        message = \"High probability of purchase\" if prediction > 0.5 else \"Low probability of purchase\"\n        return {\n            \"user_id\": user_id,\n            \"item_id\": item_id,\n            \"prediction\": prediction,\n            \"message\": message\n        }\n    else:\n        return {\"message\": \"No view history for this user-item pair\"}\n\n# 启动Kafka消费者线程\nimport threading\nthread = threading.Thread(target=process_messages)\nthread.daemon = True\nthread.start()",
      "comments": [
        "使用FastAPI创建REST API端点",
        "MongoClient连接MongoDB数据库",
        "KafkaConsumer从Kafka主题消费消息",
        "简单的PyTorch神经网络模型用于预测",
        "多线程处理Kafka消息消费"
      ]
    }
  },
  "test_cases": [
    {
      "input": {
        "method": "GET",
        "url": "/predict/user123/item456"
      },
      "expected_output": {
        "status": 200,
        "body_contains": ["prediction", "message"]
      },
      "description": "测试预测端点返回正确格式"
    },
    {
      "input": {
        "method": "GET",
        "url": "/predict/nonexistent/item"
      },
      "expected_output": {
        "status": 200,
        "body_contains": ["No view history"]
      },
      "description": "测试不存在的用户-商品组合"
    }
  ],
  "technologies": [
    "Python",
    "FastAPI",
    "MongoDB",
    "Kafka",
    "PyTorch"
  ],
  "key_points": [
    "理解如何从Kafka消费数据",
    "熟悉MongoDB的基本操作",
    "能够实现简单的机器学习模型",
    "掌握FastAPI创建REST端点",
    "处理多线程任务"
  ]
}
